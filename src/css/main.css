/* -------- Main CSS Stylesheet.
 ==============================================================================
 General Guidelines
 ------------------------------------------------------------------------------
   * Each CSS rule must follow an alphabetical format. 
   * This means each property of a rule should be in alphebetical order from top to bottom
   * with the exception of special character statements at the very top (@, -, etc).
   *
   * HINT: VSCode command "Sort Lines Ascending" set to keybind "alt + a". Use this to 
   * sort properties.
   *
   * This stylesheet is broken down into sections. To jump to them, use the find tool
   * to search for "||".
 ==============================================================================
 Naming Convention (SMACSS Derivative)
 ------------------------------------------------------------------------------
   * Priority is given to classes over ID's in most cases.
   *
   * General naming convention is as follows: 
   * [name/shorthand/state]-[component/state]-[adjustor/Variant]
   * ex. ".sidebar-header" or ".sb-h" // Defines specific component styling.
   * ex. ".btn-primary" or ".text-primary" // Defines primary styling for elements.
   * ex. ".is-active" or ".has-success" // Defines styling for states.
   * ex. ".w-100" or ".h-100" // Utility classes for sizing with percentage.
   *
 =============================================================================*/

/* =====================================
   || General Rules
   =====================================
   * Used for default styling of general elements. No ID's or classes.
   * e.g. body, h, p, links, tables, fonts, padding, blockquote, etc.
*/

body {
   font-family: 'Public Sans', sans-serif;
   margin: 0;
   padding: 0;
}

h1 {
   font-size: var(--text-h1);
}
h2 {
   font-size: var(--text-h2);
}
h3 {
   font-size: var(--text-h3);
}
h4 {
   font-size: var(--text-h4);
}
h5 {
   font-size: var(--text-h5);
}

p {
   font-size: var(--text-p);
}

/* =====================================
   || Theme & Utility Rules
   =====================================
   * Contains highly-reusable utility classes that can be used on various modules 
   * and elements.
   * Also used for theme and design styling. This can include brand color classes, font
   * size classes, gradient classes, link color classes, etc.
*/
   /* Style Guide ================
   * Primary Typeface: Public Sans
   * Primary: #457CE7
   * Primary Accent: #8091B3
   * Secondary: #F5D63D
   * Dark: #0D0D0D
   * Light: #ffffff
   * Background: #E0E2E6
   * Border: #DBDDE1
   * Unselected: #F7F7F8
   */

   html { /* Define global Reusable Variables. Saves time. */
      --color-primary: #457CE7;
      --color-primary-accent: #8091B3;
      --color-secondary: #F5D63D;
      --color-dark: #0D0D0D;
      --color-light: #ffffff;
      --color-border: #DBDDE1;
      --color-unselected: #F7F7F8;

      --text-display: 52px;
      --text-h1: 48px;
      --text-h2: 32px;
      --text-h3: 24px;
      --text-h4: 16px;
      --text-h5: 12px;
      --text-p: 16px;
      --text-p-small: 12px;
   }
/* Colors
   ========================== */

   .text-primary {
      color: var(--color-primary);
   }

/* =====================================
   || Layout Rules
   =====================================
   * Contains styling for the larger sections of a page, as well as alignment styles. 
   * ID's may be used for larger sections.
   * 
   * e.g. header, footer, sidebar, main navigation, article, container, maincontent, etc.
   * e.g. grid, flex, display, etc.
*/

#header {
   border-bottom: solid 2px var(--color-border);
   padding: 0 25px;
}

#footer {
   border-top: solid 2px var(--color-border);
   padding: 5px 0px 5px 0px;
}

#main {
   background-color: #E0E2E6;
   padding-top: 25px;
}

/* Alignment (Flex and Grid)
   ========================== */

.flex-header {
   align-items: center;
   display: flex;
   justify-content: left;
}

.flex-card-content {
   align-items: center;
   display: flex;
   justify-content: flex-start;
}


/* =====================================
   || Module Rules
   =====================================
   * Contains rules for standalone components. Defined with modularity and reusability
   * in mind. Modules makes up the bulk of your webpage.
   * 
   * Stick to classes. This way we can nest smaller modules within other modules.
   * e.g. cards, carousel, modals, navigation bars, dialog, popup, tooltip, etc.
   * e.g. forms, buttons, sliders, dropdowns, video, audio, etc.
*/

/* Header Bar
   ========================== */

.header-container{
   padding: 5px 0px 5px 0px;
}

.header-nav {
   margin-right: 25px;
}

.header-title h1 {
   font-size: var(--text-h4);
   font-weight: 800;
}

/* Footer
   ========================== */

.footer-social {
   text-align: center;
   color: var(--color-primary-accent);
}

/* Card Component
   ========================== */
.itemCard-container {
   background-color: var(--color-light);
   border-top-left-radius: 7px;
   border-top-right-radius: 7px;
   margin: 0px 25px 15px 25px;
   padding: 5px 20px 5px 20px;
}

.itemCard-icon {
   margin-right: 10px;
   text-align: center;
   width: 10%;
}
.itemCard-icon img {
   width: 26px;
}

.itemCard-title {
   width: 80%;
}

.itemCard-open {
   text-align: center;
   width: 10%;
}
   
/* =====================================
   || State Rules
   ===================================== 
   * Contains rules for the different possible variations of a single element or module.
   * At its simplest form, it can offer two styles for activated or deactivated.
   * 
   * Can be applied to layout or modules. Typically utilizes JavaScript to function.
   * e.g. isActive, hasError, InputSuccess, hidden, shown, etc.
*/






